#include <iostream>
#include <fcntl.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <linux/joystick.h>
#include <memory>
#include <thread>
#include <array>
#include <mutex>
#include <atomic>
#include <cstdio>
#include "Console.hpp"
#include "app/command.h"
#include "app/command.cpp"
#include <iostream>
#include <linux/input.h>
#include <fcntl.h>
#include <unistd.h>
#include <string>

#include <cerrno>
#include <fcntl.h>
#include <ncurses.h>
#include <cstdlib>
#include <cstring>
#include <unistd.h>

#include <linux/input.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <linux/joystick.h>
#include <mutex>
#include <shared_mutex>

extern "C" {
#include "ethercat.h"
}
struct JoystickEvent {
    uint32_t time;
    int16_t value;
    uint8_t type;
    uint8_t number;
};

struct JoystickState {
    std::array<int16_t, 8> axes;
    std::array<uint8_t, 11> buttons;
};

// Forward declaration of print_state to ensure it's known before controlMotor
void print_state(const JoystickState &state);

class JoystickHandler {
public:
    JoystickHandler(const char *device) : device_(device), stop_(false) {}

    void start() {
        thread_ = std::make_shared<std::thread>(&JoystickHandler::run, this);
    }

    void stop() {
        {
            std::lock_guard<std::mutex> lock(mutex_);
            stop_ = true;
        }
        if (thread_->joinable()) {
            thread_->join();
        }
    }

    JoystickState getState() {
        std::lock_guard<std::mutex> lock(mutex_);
        return state_;
    }

private:
    void run() {
        int fd = open(device_, O_RDONLY | O_NONBLOCK);
        if (fd == -1) {
            perror("Failed to open joystick device");
            return;
        }

        js_event event;
        auto last_time = std::chrono::steady_clock::now();
        double frequency_sum = 0.0;
        int count = 0;

        while (true) {
            {
                std::lock_guard<std::mutex> lock(mutex_);
                if (stop_) break;
            }

            ssize_t bytes = read(fd, &event, sizeof(event));
            if (bytes == sizeof(event)) {
                JoystickEvent je = {event.time, event.value, event.type, event.number};
                updateState(je);
            } else if (bytes == -1 && errno != EAGAIN) {
                perror("Error reading from joystick device");
                break;
            }

            // Calculate frequency
            auto now = std::chrono::steady_clock::now();
            double elapsed_seconds = std::chrono::duration<double>(now - last_time).count();
            frequency_sum += 1.0 / elapsed_seconds;
            count++;
            last_time = now;

            // Print frequency every second
            if (count >= 50.0) {
                double average_frequency = frequency_sum / count;
//                std::cout << "Frequency: " << average_frequency << " Hz\n";
                frequency_sum = 0.0;
                count = 0;
            }

            // Limit frequency to 50Hz
            std::this_thread::sleep_until(last_time + std::chrono::milliseconds(5));
        }

        close(fd);
    }

    void updateState(const JoystickEvent &event) {
        std::lock_guard<std::mutex> lock(mutex_);
        switch (event.type & ~JS_EVENT_INIT) {
            case JS_EVENT_AXIS:
                if (event.number < state_.axes.size()) {
                    state_.axes[event.number] = event.value;
                }
                break;
            case JS_EVENT_BUTTON:
                if (event.number < state_.buttons.size()) {
                    state_.buttons[event.number] = event.value;
                }
                break;
            default:
                break;
        }
    }

    const char *device_;
    JoystickState state_;
    std::shared_ptr<std::thread> thread_;
    mutable std::mutex mutex_;
    std::atomic<bool> stop_;
};

void controlMotor(std::shared_ptr<JoystickHandler> handler) {
    EtherCAT_Init("enp5s0");

    if (ec_slavecount <= 0) {
        printf("未找到从站, 程序退出！");
        return;
    } else
        printf("从站数量： %d\r\n", ec_slavecount);
    int slaveId = 0;
    int motor_id = 2;
    float spd = 5;
    uint16_t cur = 500;
    uint8_t ack_status = 2;
    EtherCAT_Msg_ptr msg(new EtherCAT_Msg);
    auto last_time = std::chrono::steady_clock::now();

    startRun();
    while (true) {
        JoystickState state = handler->getState();
        spd = state.axes[0] / 30000.0*25;
        print_state(state);
        motor_id = 1;
        set_motor_speed(msg.get(), motor_id, spd, cur, ack_status);
        motor_id = 2;
        set_motor_speed(msg.get(), motor_id, spd, cur, ack_status);
        sendToQueue(slaveId, msg);

        // Limit frequency to 50Hz
        auto now = std::chrono::steady_clock::now();
        std::this_thread::sleep_until(last_time + std::chrono::milliseconds(2));
        last_time = now;
        // Add motor control logic here based on the state
    }
}

void print_state(const JoystickState &state) {
    std::cout << "Axes: ";
    for (int i = 0; i < state.axes.size(); ++i) {
        std::cout << state.axes[i] << " ";
    }
    std::cout << "Buttons: ";
    for (int i = 0; i < state.buttons.size(); ++i) {
        std::cout << static_cast<int>(state.buttons[i]) << " ";
    }
    std::cout << "\n";
}

int main() {
    printf("SOEM 主站测试\n");
    const char *device = "/dev/input/js0";
    std::shared_ptr<JoystickHandler> handler = std::make_shared<JoystickHandler>(device);
    handler->start();
    std::thread motorThread(controlMotor, handler);

    // Keep the main thread alive to prevent immediate exit
    motorThread.join();
    runThread.join();//runThread.join(); 的主要功能是确保 main 函数在退出之前等待 runThread 线程完成其任务。
    // 这样做的目的是为了确保程序在退出前所有的后台任务都得到了正确的执行和清理，避免数据丢失或资源泄露。

    handler->stop();

    return 0;
}
